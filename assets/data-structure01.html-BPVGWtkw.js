import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,e as s,b as t,d as p}from"./app-Djg1w615.js";const l={},u=n("img",{src:"https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240110122537240.png",alt:"image-20240110122537240",style:{zoom:"67%"}},null,-1),r=n("h2",{id:"info",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#info"},[n("span",null,"INFO")])],-1),k=n("p",null,"好用的一些网站：",-1),d={href:"https://www.learn-c.org/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.itbaima.cn/",target:"_blank",rel:"noopener noreferrer"},v=p('<hr><blockquote><p>Link: <a href="../software/Clion">CLion 的安装与配置</a></p></blockquote><table><thead><tr><th>Tools</th><th>Description</th><th>Version</th></tr></thead><tbody><tr><td>CLion</td><td>集成开发环境</td><td>2023.3.2</td></tr><tr><td>C</td><td>C 标准</td><td>C99</td></tr></tbody></table><hr>',4),b={href:"https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Cr4y137os%2F%3Fvd_source%3D9071a50b607525e6db8ba7b49bc960f5",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,"本部分代码托管在 Link: https://gitee.com/cola777jz/qkxg_c_2022 项目的 src/basic 下：",-1),h=p(`<figure><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240108122000830.png" alt="image-20240108122000830" tabindex="0" loading="lazy"><figcaption>image-20240108122000830</figcaption></figure><figure><img src="https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109201927766.png" alt="image-20240109201927766" tabindex="0" loading="lazy"><figcaption>image-20240109201927766</figcaption></figure><h2 id="一、基本数据类型与运算符" tabindex="-1"><a class="header-anchor" href="#一、基本数据类型与运算符"><span>一、基本数据类型与运算符</span></a></h2><h2 id="_1-1-c-语言中的运算" tabindex="-1"><a class="header-anchor" href="#_1-1-c-语言中的运算"><span>1.1 C 语言中的运算</span></a></h2><div class="hint-container caution"><p class="hint-container-title">表达式运算后的值为表达式本身的值</p><ul><li>eg: <code>int a = (3 + (c = 2)) * 6 中 (c=2) ==&gt; 2</code></li><li>result: <code>a = (3 + 2) * 6 = 30</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic01_demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container caution"><p class="hint-container-title">逗号运算符从前往后依次执行，赋值结果是最后边的结果</p><ul><li>eg: <code>a = (b = 5, c = b + 8) 中 (b = 5, c = b + 8) ==&gt; c=13</code></li><li>result: <code>a = 13</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic01_demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="二、流程控制" tabindex="-1"><a class="header-anchor" href="#二、流程控制"><span>二、流程控制</span></a></h2><h2 id="_2-1-条件控制" tabindex="-1"><a class="header-anchor" href="#_2-1-条件控制"><span>2.1 条件控制</span></a></h2><div class="hint-container caution"><p class="hint-container-title">if-else if 适用于对 范围 判断</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic01_demo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please Input Your Score: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Score is: %d Level is: Very Good&quot;</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Score is: %d Level is: Good&quot;</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Score is: %d Level is: just so so&quot;</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Score is: %d Level is: bad&quot;</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container caution"><p class="hint-container-title">switch 适用于对 精确值 进行判断</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic01_demo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> level <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please Input Your Level (A|B|C): \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">&quot; %c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;A&#39;</span><span class="token operator">:</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Level is: %c GO to 985 &quot;</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;B&#39;</span><span class="token operator">:</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Level is:  %c GO to 211 &quot;</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;C&#39;</span><span class="token operator">:</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Level is:  %c GO to One &quot;</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Level is:  %c GO to Two &quot;</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container tip"><p class="hint-container-title">scanf_s 的使用</p><p>当在 <code>basic01_demo03</code> 中使用 <code>scanf_s</code> 读取分数时，它读取了你输入的整数值但没有消耗按下回车键时生成的换行符 <code>（\\n）</code> 这个换行符留在了输入缓冲区中然后当执行到 <code>basic01_demo04</code> 并调用 <code>scanf_s </code> 来读取一个字符时，它立即读取了缓冲区中剩下的这个换行符而不是等待新的输入。这就是为什么看起来像是跳过了输入为了解决这个问题，可以在 <code>basic01_demo04</code> 的 <code>scanf_s</code> 格式字符串中的 <code>%c</code> 前面加一个空格这个空格告诉 <code>scanf_s</code> 跳过可能存在的任何空白字符（包括换行符）即 <code>scanf_s(&quot; %c&quot;, &amp;level)</code></p></div><h2 id="_2-2-循环控制" tabindex="-1"><a class="header-anchor" href="#_2-2-循环控制"><span>2.2 循环控制</span></a></h2><div class="hint-container warning"><p class="hint-container-title">水仙花数</p><p>水仙花数（Narcissistic number）也被称为超完全数字不变数（pluperfect digital invariant, PPDI）自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number）水仙花数是指 一个 3 位数，它的每个位上的数字的 3 次幂之和等于它本身 现在请你设计一个 C 语言程序，打印出所有 1000 以内的水仙花数。</p><p>eg: 1^3 + 5^3+ 3^3 = 153</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic01_demo05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> third <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        third <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>
        second <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        first <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>first <span class="token operator">*</span> first <span class="token operator">*</span> first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>second <span class="token operator">*</span> second <span class="token operator">*</span> second<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>third <span class="token operator">*</span> third <span class="token operator">*</span> third<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %d is PPDI\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container warning"><p class="hint-container-title">九九乘法表</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic01_demo06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo06&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d x %d = %d \\t&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo06&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_2-3-递归" tabindex="-1"><a class="header-anchor" href="#_2-3-递归"><span>2.3 递归</span></a></h2><div class="hint-container warning"><p class="hint-container-title">斐波那契数列</p><p>斐波那契数列（Fibonacci sequence）又称黄金分割数列因数学家莱昂纳多·斐波那契（Leonardo Fibonacci）以兔子繁殖为例子而引入故又称为 “兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、…… 在数学上，斐波那契数列以如下被以递推的方法定义：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>F<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>，F<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>
F<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=</span>F<span class="token punctuation">(</span>n - <span class="token number">1</span><span class="token punctuation">)</span> + F<span class="token punctuation">(</span>n - <span class="token number">2</span><span class="token punctuation">)</span>（n ≥ <span class="token number">2</span>，n ∈ N）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从 1963 年起出版了以《斐波纳契数列季刊》为名的一份数学杂志用于专门刊载这方面的研究成果</p><p>斐波那契数列：1，1，2，3，5，8，13，21，34，55，89...，不难发现一个规律，实际上从第三个数开始，每个数字的值都是前两个数字的和，现在请你设计一个 C 语言程序，可以获取斐波那契数列上任意一位的数字，比如获取第 5 个数，那么就是 5</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 * 斐波那契数列
 * @param index index
 * @return  result
 */</span>
<span class="token keyword">int</span> <span class="token function">fibonacciSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> result<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token function">fibonacciSequence</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacciSequence</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">basic01_demo07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo07&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please Input Your index: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;index = %d | result = %d &quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token function">fibonacciSequence</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic01_demo07&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_2-4-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_2-4-冒泡排序"><span>2.4 冒泡排序</span></a></h2><ul><li><p>核心思想</p><ul><li><p>假设数组长度为 N 进行 N -1 轮循环，每轮循环都选出一个最大的数放到后面</p></li><li><p>每次循环中，从第一个数开始，让其与后面的数两两比较，如果更大，就交换位置，如果更小，就不动</p></li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">嵌套的 for 循环来实现冒泡排序算法:</p><ul><li>外层循环 for (i = 0; i &lt; n - 1; i++) 控制了排序的轮数 在每一轮中 内层循环会执行比较和交换操作</li><li>内层循环 for (j = 0; j &lt; n - 1 - i; j++) 用于比较相邻的元素 并根据需要进行交换 由于每一轮都会将当前最大的元素移动到末尾 所以内层循环的终止条件是 n - 1 - i</li><li>在内层循环中，通过比较 arr[j] 和 arr[j + 1] 的大小来确定它们的顺序 如果 arr[j] 大于 arr[j + 1] 则交换它们的位置 确保较大的元素在后面</li><li>交换操作使用了一个临时变量 temp 将 arr[j] 的值保存起来 然后将 arr[j + 1] 的值赋给 arr[j] 最后将 temp 的值赋给 arr[j + 1] 完成两个元素的交换这样 每一轮内层循环执行完毕后 当前轮最大的元素就会被放置在正确的位置上</li><li>内层循环的终止条件 n - 1 - i 是基于以下观察：每一轮冒泡排序都会将当前轮中最大的元素移动到末尾的正确位置上</li><li>在第一轮比较中 通过内层循环的交换操作，最大的元素会被移动到数组的最后一个位置（即 arr[n-1]）</li><li>在第二轮比较中 由于最大的元素已经在正确的位置上，内层循环只需要比较和交换剩下的元素 这样最大的元素不会被再次考虑</li><li>在第三轮比较中 第二大的元素会被移动到倒数第二个位置（即 arr[n-2]）</li><li>以此类推 每一轮冒泡排序都会将当前轮中最大的元素移动到正确的位置上 因此内层循环的终止条件可以逐渐减少 避免重复比较已经排好序的元素</li><li>综上所述 内层循环的终止条件 n - 1 - i 是为了优化冒泡排序算法的性能 避免不必要的比较操作 因为在每一轮中，已经有 i 个元素被排好序了</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the %d result: &quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">basic02_demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------------------\\nbefore sort: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------------------\\nafter sort: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container tip"><p class="hint-container-title">解释</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>给定序列: <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span>
<span class="token number">1</span>. 从序列的第一个元素开始 依次比较相邻的两个元素 如果前一个元素大于后一个元素 则交换它们的位置
     - 第 <span class="token number">1</span> 轮:   <span class="token number">7</span> <span class="token operator">&gt;</span> <span class="token number">2</span> --<span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span>
     -           <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">0</span> --<span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">9</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span>
     -           <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">6</span> --<span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">9</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span>
     -           <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">7</span> --<span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span>
     -           <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">1</span> --<span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">4</span>
     -           <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">8</span> --<span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">4</span>
     -           <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">4</span> --<span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">9</span>

     第 <span class="token number">1</span> 轮排序结束后序列为:  <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">9</span> 已经排在了序列的最后 对除最后一个元素外的剩余元素进行第二轮排序，重复步骤 <span class="token number">1</span>
     第 <span class="token number">2</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">8</span> 已经排在了序列的最后
     第 <span class="token number">3</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">0</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">1</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">7</span> 已经排在了序列的最后
     第 <span class="token number">4</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">7</span> 已经排在了序列的最后
     第 <span class="token number">5</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">6</span> 已经排在了序列的最后
     第 <span class="token number">6</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">5</span> 已经排在了序列的最后
     第 <span class="token number">7</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">4</span> 已经排在了序列的最后
     第 <span class="token number">8</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">3</span> 已经排在了序列的最后
     第 <span class="token number">9</span> 轮排序结束后 序列为: <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">2</span> 已经排在了序列的最后
     第 <span class="token number">10</span> 轮排序结束后 序列为:<span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> 最大的元素 <span class="token number">1</span> 已经排在了序列的最后
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="三、高级部分" tabindex="-1"><a class="header-anchor" href="#三、高级部分"><span>三、高级部分</span></a></h2><h2 id="_3-1-指针" tabindex="-1"><a class="header-anchor" href="#_3-1-指针"><span>3.1 指针</span></a></h2><div class="hint-container caution"><p class="hint-container-title">指针</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 * 值传递
 */</span>
<span class="token keyword">void</span> <span class="token function">basic03_demo02</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 址传递
 */</span>
<span class="token keyword">void</span> <span class="token function">basic03_demo03</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token operator">*</span>a <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_3-2-数组" tabindex="-1"><a class="header-anchor" href="#_3-2-数组"><span>3.2 数组</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 ?* 斐波那契数列解法 其二
 ?* 学习了数组，我们来看看如何利用数组来计算斐波那契数列 这里 采用动态规划 的思想
 ?* 动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解每一个解都对应于一个值
 ?* 我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。
 * &lt;p&gt;
 ** 我们可以在一开始创建一个数组，然后从最开始的条件不断向后推导，从斐波那契数列的规律我们可以得知：
 ** fib[i] = fib[i - 1] + fib[i - 2]（这里fib代表斐波那契数列）
 ** 得到这样的一个关系（递推方程）就好办了，我们要求解数列第i个位置上的数，只需要知道i - 1和i - 2的值即可，这样，一个大问题，就分成了两个小问题，比如现在我们要求解斐波那契数列的第5个元素：
 ** fib[4] = fib[3] + fib[2]现在我们只需要知道fib[3]和fib[2]即可，那么我们接着来看：
 ** fib[3] = fib[2] + fib[1]以及fib[2] = fib[1] + fib[0]
 ** 由于fib[0]和fib[1]我们已经明确知道是1了，那么现在问题其实已经有结果了，把这些小问题的结果组合起来不就能得到原来大问题的结果了吗？
 * &lt;p&gt;
 !* 现在请你设计一个 C 语言程序 利用 动态规划 的思想解决斐波那契数列问题
 */</span>
<span class="token keyword">void</span> <span class="token function">basic02_demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 ?* 打家劫舍  来源：力扣（LeetCode）No.198 打家劫舍：https://leetcode.cn/problems/house-robber/

 */</span>
<span class="token keyword">void</span> <span class="token function">basic02_demo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-字符串" tabindex="-1"><a class="header-anchor" href="#_3-3-字符串"><span>3.3 字符串</span></a></h2><div class="hint-container caution"><p class="hint-container-title">字符串的本质</p><ul><li><code>char cbq01[] = {&#39;H&#39;, &#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;,&#39; &#39;, &#39;C&#39;, &#39;B&#39;, &#39;Q&#39;, &#39;\\0&#39;}</code></li><li><code>const char cbq02[] = &quot;HELLO CBQ&quot;</code></li></ul><p><strong>cbq01</strong> 中 <code>&#39;\\0&#39;</code> 代表字符串结束标志 | 无论内容是什么，字符串末尾必须添加一个 <code>&#39;\\0&#39;</code> 字符（ASCII 码为 0）表示结束</p><p><strong>双引号囊括的字符串</strong> 实际上就是一个 <code>const char</code> 数组类型的值</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic02_demo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> cbq01<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> cbq02<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;HELLO CBQ&quot;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;cbq01 = %s \\n| cbq02 = %s &quot;</span><span class="token punctuation">,</span> cbq01<span class="token punctuation">,</span> cbq02<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_3-4-回文串的判断" tabindex="-1"><a class="header-anchor" href="#_3-4-回文串的判断"><span>3.4 回文串的判断</span></a></h2><div class="hint-container warning"><p class="hint-container-title">回文串的判断</p><p>回文串 是一个正读和反读都一样的字符串 请你实现一个 C 语言程序判断用户输入的字符串（仅出现英文字符）是否为 回文串</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic02_demo05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     !* 从 control 控制台获取一个 str 字符串并取出 \\n
     */</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please Input str: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    str<span class="token punctuation">[</span><span class="token function">strcspn</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> j <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s is not back str\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s is back str\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container tip"><p class="hint-container-title">strcspn 函数</p><p>strcspn 是一个 C 语言标准库函数，它的原型如下： <code>size_t strcspn(const char *str1, const char *str2)</code>，<code>strcspn </code> 函数用于计算字符串 str1 开头连续不包含字符串 str2 中任何字符的长度具体来说，strcspn 函数会从 str1 的开头开始逐个字符地与 str2 中的字符进行比较 直到遇到 str2 中的任何字符，或者到达 str1 的末尾为止函数返回的是在遇到第一个 str2 中的字符之前 str1 开头连续的字符个数</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot; ,!&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strcspn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;连续不包含 %s 中任何字符的长度为 %zu\\n&quot;</span><span class="token punctuation">,</span> str2<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，str1 是一个字符串 &quot;Hello, World!&quot;，str2 是一个包含空格、逗号和感叹号的字符串 <code>&quot; ,!&quot;</code> <code>strcspn(str1, str2) </code> 的返回值是 7，表示字符串 str1 开头连续不包含 str2 中任何字符的长度为 7</p></div><h2 id="_3-5-kmp-字符串匹配算法" tabindex="-1"><a class="header-anchor" href="#_3-5-kmp-字符串匹配算法"><span>3.5 KMP 字符串匹配算法</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">computeLPSArray</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pat<span class="token punctuation">,</span> <span class="token class-name">size_t</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> lps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    lps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            len<span class="token operator">++</span><span class="token punctuation">;</span>
            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                len <span class="token operator">=</span> lps<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">KMPSearch</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pat<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     !* 使用 size_t 类型来代替 int 以存储字符串的长度是一个合理的修改
     !* 这是因为 strlen 函数返回的是 size_t 类型的值 这是一个无符号整数类型，用于表示大小或长度
     !* 将 size_t 类型的值赋给 int 类型的变量可能会引发类型转换问题 尤其是当字符串长度超过 int 类型可以表示的最大值时
     */</span>
    <span class="token class-name">size_t</span> M <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> N <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lps<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">computeLPSArray</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> M<span class="token punctuation">,</span> lps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> txt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Found pattern at index %zu \\n&quot;</span><span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Pattern found</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> txt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Pattern not found</span>
<span class="token punctuation">}</span>
<span class="token comment">/**
 * 字符串匹配 KMP 算法
 * 现在请你设计一个 C 语言程序 判断第一个字符串中是否包含了第二个字符串
 * eg: str1 = &quot;abcdabbc&quot;
 *     str2 = &quot;cda&quot;
 * 比如上面的例子中 很明显第一个字符串包含了第二个字符串
 */</span>
<span class="token keyword">void</span> <span class="token function">basic02_demo06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo06&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> txt<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;abcdabbc&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> pat<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;cda&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">KMPSearch</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> txt<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pattern found in the string.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pattern not found in the string.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic02_demo06&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-6-结构体" tabindex="-1"><a class="header-anchor" href="#_3-6-结构体"><span>3.6 结构体</span></a></h2><div class="hint-container caution"><p class="hint-container-title">结构体的定义及使用</p><ul><li>访问结构体元素的两种方式 <ul><li><code>结构体名.属性</code></li><li><code>(*结构体指针名).属性</code> 等同于 <code>结构体指针名-&gt;属性</code></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic03_demo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Student cbq <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">&quot;CaoBaoQi&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    Student <span class="token operator">*</span>cbq_p <span class="token operator">=</span> <span class="token operator">&amp;</span>cbq<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;show info by struct: {id = %d, age = %d, name = %s}\\n&quot;</span><span class="token punctuation">,</span> cbq<span class="token punctuation">.</span>id<span class="token punctuation">,</span> cbq<span class="token punctuation">.</span>age<span class="token punctuation">,</span> cbq<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;show info by struct pointer(Complex) {id = %d, age = %d, name = %s}\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>cbq_p<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>cbq_p<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>
           <span class="token punctuation">(</span><span class="token operator">*</span>cbq_p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     !* (*cbq_p).id 等同于 cbq_p-&gt;id
     */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;show info by struct pointer(Simple) {id = %d, age = %d, name = %s}\\n&quot;</span><span class="token punctuation">,</span> cbq_p<span class="token operator">-&gt;</span>id<span class="token punctuation">,</span> cbq_p<span class="token operator">-&gt;</span>age<span class="token punctuation">,</span> cbq_p<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container caution"><p class="hint-container-title">结构体空间大小的计算</p><ul><li>结构体中的各个数据要求字节对齐，规则如下： <ul><li>结构体中元素按照定义顺序依次置于内存中，但并不是紧密排列的。从结构体首地址开始依次将元素放入内存时，元素会被放置在其自身对齐大小的整数倍地址上（0默认是所有大小的整数倍）</li><li>如果结构体大小不是所有元素中最大对齐大小的整数倍，则结构体对齐到最大元素对齐大小的整数倍，填充空间放置到结构体末尾</li><li>基本数据类型的对齐大小为其自身的大小，结构体数据类型的对齐大小为其元素中最大对齐大小元素的对齐大小</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code> <span class="token operator">*</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> a<span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token punctuation">;</span>
        <span class="token keyword">short</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>Object<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其中 char 为 1B int 4B short 2B</li><li>char占据 1 个字节</li><li>int占据 4 个字节 因为前面存了一个 char 按理说应该从第 2 个字节开始存放 但是根据规则一 必须在自己的整数倍位置上存放 2 不是 4 的整数倍位置，这时离 1 最近的下一个整数倍地址就是 4 了，所以前面空 3 个字节的位置出来，然后再放置</li><li>前面存完 int 之后，就是从 8 开始了 刚好满足 short（2B）的整数倍，但是根据规则二，整个结构体大小必须是最大对齐大小的整数倍（这里最大对齐大小是 int，所以是 4），存完 short 之后，只有 10 个字节，所以屁股后面再补两个空字节，这样就可以了</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">|</span> char 1B <span class="token operator">|</span> 3B <span class="token operator">|</span> int 4B <span class="token operator">|</span> short 2B <span class="token operator">|</span> 2B  <span class="token operator">|</span>
<span class="token operator">|</span><span class="token number">1</span>             <span class="token number">4</span>        <span class="token number">8</span>         <span class="token number">10</span>   <span class="token number">12</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic03_demo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> a<span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token punctuation">;</span>
        <span class="token keyword">short</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> Object<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;struct Object size is = %llu&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><div class="hint-container caution"><p class="hint-container-title">结构体数组和指针</p><ul><li>数组方式访问：<code>students[i].name</code></li><li>指针方式访问：<code>student_p-&gt;name</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 * 结构体数组和指针
 */</span>
<span class="token keyword">void</span> <span class="token function">basic03_demo05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Student students<span class="token punctuation">[</span>COUNT<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">&quot;CBQ&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                               <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">&quot;CBH&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                               <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;CB&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Show INFO By array: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;INFO: name = %s, id = %d, age = %d \\n&quot;</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Student <span class="token operator">*</span>student_p <span class="token operator">=</span> students<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Show INFO By pointer: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;INFO: name = %s, id = %d, age = %d \\n&quot;</span><span class="token punctuation">,</span> student_p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> student_p<span class="token operator">-&gt;</span>id<span class="token punctuation">,</span> student_p<span class="token operator">-&gt;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        student_p<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_3-7-联合体" tabindex="-1"><a class="header-anchor" href="#_3-7-联合体"><span>3.7 联合体</span></a></h2><div class="hint-container caution"><p class="hint-container-title">联合体</p><p>联合体也可以在内部定义很多种类型的变量，但是它与结构体不同的是，所以的变量共用同一个空间</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 * 联合体 联合体的大小至少是其内部最大类型的大小
 */</span>
<span class="token keyword">void</span> <span class="token function">basic03_demo06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo06&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> <span class="token keyword">union</span> Teacher<span class="token punctuation">{</span>
        <span class="token keyword">int</span> id<span class="token punctuation">;</span>
        <span class="token keyword">char</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;union Teacher size is = %llu\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;=========================\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Teacher teacher<span class="token punctuation">;</span>
    teacher<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;teacher id = %d \\n&quot;</span><span class="token punctuation">,</span> teacher<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     !* teacher id = 1
     !* teacher name = 1
     联合体公用一段空间
     */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;teacher name = %d \\n&quot;</span><span class="token punctuation">,</span> teacher<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo06&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_3-8-枚举" tabindex="-1"><a class="header-anchor" href="#_3-8-枚举"><span>3.8 枚举</span></a></h2><div class="hint-container caution"><p class="hint-container-title">枚举的使用</p><p>枚举类型一般用于表示一些预设好的整数常量，比如我们风扇有低、中、高三个档位，我们总是希望别人使用我们预设好的这三个档位，而不希望使用其他的档位，因为我们风扇就只设计了这三个档位。</p><p>这时我们就可以告诉别人，我们的风扇有哪几个档位，这种情况使用枚举就非常适合。在我们的程序中，只能使用基本数据类型对这三种档位进行区分，这样显然可读性不够，别人怎么知道哪个代表哪个档位呢？而使用枚举就没有这些问题了：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic03_demo07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo07&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">enum</span> <span class="token class-name">status</span> <span class="token punctuation">{</span> low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> middle <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;low: %d\\n&quot;</span><span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;middle: %d\\n&quot;</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;high: %d\\n&quot;</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * low2 由于是第一个，所以还是从 0 开始
     * 不过 middle2 这里已经指定为 6 了 所以紧跟着的 high2 初始值就是 middle2 的值 +1 了
     * 因此 low2 现在是 0 middle就是 6 high2 就是 7 了
     */</span>
    <span class="token keyword">enum</span> <span class="token class-name">status2</span> <span class="token punctuation">{</span>low2<span class="token punctuation">,</span> middle2 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> high2<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;low2: %d\\n&quot;</span><span class="token punctuation">,</span> low2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;middle2: %d\\n&quot;</span><span class="token punctuation">,</span> middle2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;high2: %d\\n&quot;</span><span class="token punctuation">,</span> high2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo07&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_3-9-malloc-函数" tabindex="-1"><a class="header-anchor" href="#_3-9-malloc-函数"><span>3.9 malloc 函数</span></a></h2><div class="hint-container caution"><p class="hint-container-title">malloc 函数的使用</p><ul><li><strong>malloc</strong> 用于向系统申请分配指定 <strong>size 个字节</strong> 的内存空间返回类型是 <strong>void * 类型</strong> 如果申请成功返回 <strong>首地址</strong></li><li>如果失败返回 NULL 空地址（比如系统内存不足了就可能会申请失败）</li><li>内存资源是很宝贵的（不像硬盘几个 T 随便用 我们的电脑可能 32G 的内存都算高配了）</li><li>不能随便浪费 所以 <strong>一般情况下 malloc 和 free 都是一一对应的</strong> 这样才能安全合理地使用内存</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">basic03_demo08</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printHeader</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo08&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*p = %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token string">&quot;basic03_demo08&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,52);function f(q,_){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,n("blockquote",null,[k,n("ul",null,[n("li",null,[n("a",d,[s("Learn-C"),t(a)])]),n("li",null,[n("a",m,[s("青空の霞光-IT 柏码"),t(a)])])])]),v,n("blockquote",null,[n("ul",null,[n("li",null,[s("参考自: 青空の霞光-C 教程 Link: "),n("a",b,[s("https://www.bilibili.com/video/BV1Cr4y137os/?vd_source=9071a50b607525e6db8ba7b49bc960f5"),t(a)])]),g])]),h])}const x=e(l,[["render",f],["__file","data-structure01.html.vue"]]),j=JSON.parse('{"path":"/data-structure/data-structure01.html","title":"C-Language","lang":"zh-CN","frontmatter":{"title":"C-Language","icon":"/svgs/c.svg","order":1,"category":["数据结构","MD"],"description":"image-20240110122537240 INFO 好用的一些网站： Learn-C 青空の霞光-IT 柏码 Link: CLion 的安装与配置 参考自: 青空の霞光-C 教程 Link: https://www.bilibili.com/video/BV1Cr4y137os/?vd_source=9071a50b607525e6db8ba7b...","head":[["meta",{"property":"og:url","content":"https://github.com/caobaoqi1029/vue-hope-template-cbq/deployments/github-pages/vue-hope-template-cbq/data-structure/data-structure01.html"}],["meta",{"property":"og:site_name","content":"Vue-Hope-Template-Cbq"}],["meta",{"property":"og:title","content":"C-Language"}],["meta",{"property":"og:description","content":"image-20240110122537240 INFO 好用的一些网站： Learn-C 青空の霞光-IT 柏码 Link: CLion 的安装与配置 参考自: 青空の霞光-C 教程 Link: https://www.bilibili.com/video/BV1Cr4y137os/?vd_source=9071a50b607525e6db8ba7b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240108122000830.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T09:52:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"C-Language"}],["meta",{"property":"article:author","content":"Mr.CBQ"}],["meta",{"property":"article:modified_time","content":"2024-03-10T09:52:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C-Language\\",\\"image\\":[\\"https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240108122000830.png\\",\\"https://jz-cbq-1311841992.cos.ap-beijing.myqcloud.com/images/image-20240109201927766.png\\"],\\"dateModified\\":\\"2024-03-10T09:52:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.CBQ\\",\\"url\\":\\"https://gitee.com/caobaoqi\\",\\"email\\":\\"2024cbq@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"INFO","slug":"info","link":"#info","children":[]},{"level":2,"title":"一、基本数据类型与运算符","slug":"一、基本数据类型与运算符","link":"#一、基本数据类型与运算符","children":[]},{"level":2,"title":"1.1 C 语言中的运算","slug":"_1-1-c-语言中的运算","link":"#_1-1-c-语言中的运算","children":[]},{"level":2,"title":"二、流程控制","slug":"二、流程控制","link":"#二、流程控制","children":[]},{"level":2,"title":"2.1 条件控制","slug":"_2-1-条件控制","link":"#_2-1-条件控制","children":[]},{"level":2,"title":"2.2 循环控制","slug":"_2-2-循环控制","link":"#_2-2-循环控制","children":[]},{"level":2,"title":"2.3 递归","slug":"_2-3-递归","link":"#_2-3-递归","children":[]},{"level":2,"title":"2.4 冒泡排序","slug":"_2-4-冒泡排序","link":"#_2-4-冒泡排序","children":[]},{"level":2,"title":"三、高级部分","slug":"三、高级部分","link":"#三、高级部分","children":[]},{"level":2,"title":"3.1 指针","slug":"_3-1-指针","link":"#_3-1-指针","children":[]},{"level":2,"title":"3.2 数组","slug":"_3-2-数组","link":"#_3-2-数组","children":[]},{"level":2,"title":"3.3 字符串","slug":"_3-3-字符串","link":"#_3-3-字符串","children":[]},{"level":2,"title":"3.4 回文串的判断","slug":"_3-4-回文串的判断","link":"#_3-4-回文串的判断","children":[]},{"level":2,"title":"3.5 KMP 字符串匹配算法","slug":"_3-5-kmp-字符串匹配算法","link":"#_3-5-kmp-字符串匹配算法","children":[]},{"level":2,"title":"3.6 结构体","slug":"_3-6-结构体","link":"#_3-6-结构体","children":[]},{"level":2,"title":"3.7 联合体","slug":"_3-7-联合体","link":"#_3-7-联合体","children":[]},{"level":2,"title":"3.8 枚举","slug":"_3-8-枚举","link":"#_3-8-枚举","children":[]},{"level":2,"title":"3.9 malloc 函数","slug":"_3-9-malloc-函数","link":"#_3-9-malloc-函数","children":[]}],"git":{"createdTime":1710064007000,"updatedTime":1710064337000,"contributors":[{"name":"cbq-ubuntu","email":"2024cbq@gmail.com","commits":2}]},"readingTime":{"minutes":17.45,"words":5236},"filePathRelative":"data-structure/data-structure01.md","localizedDate":"2024年3月10日","autoDesc":true}');export{x as comp,j as data};
